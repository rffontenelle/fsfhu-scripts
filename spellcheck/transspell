#!/bin/bash
# Copyright (c) 2016 Gabor Kelemen <kelemeng@ubuntu.com>
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 
# 51 Franklin Street, Fifth Floor Boston, MA 02110-1301 USA
#
# transspell - spell check the translated strings in a po file

# Default variables
# By default, we drop original strings and check translations.
# This can be reversed with -o
MSGID=0;
MSGSTR=1;

# Usage info, spell check language setting 
function usage
{
	echo "Usage: transspell [-l LANG] [-o] template.po[t]";
	echo -e "Check the spelling of the translated strings found in template.po[t]\n";
	echo "Options:";
	echo " -l LANG    Language of the strings to check";
	echo " -o         Check the original strings";
}

while getopts "l:o" OPTION
	do
	  case $OPTION in
  		l)
			LOCALE="$OPTARG";
			;;
		o)
			MSGID=1;
			MSGSTR=0;
			# locale is not already set with -l
			if [ -z "$LOCALE" ]; then
				LOCALE=en_US
			fi
			;;
		?)
			usage
			exit 1;
			;;
	  esac
done
shift $(($OPTIND - 1));

# Do we have a file as attribute?
if [ -f "$1" ]; then
	# Syntax check first. msgattrib would bail out on a syntactically incorrect file
	msgfmt -cvo /dev/null "$1";
	if [ $? -ne 0 ]; then
		echo "Syntax error, spell checking cannot commence";
		echo "Fix the above errors, check the file with";
		echo "msgfmt -cvo /dev/null $1";
		echo "then try again.";
		exit 1;
	fi
# A file was not provided
else
	echo "No file was provided";
	usage;
	exit 1;
fi

# Guess the LOCALE from $LANG if it was not given with -l or set to default en_US with -o
if [ -z "$LOCALE" ]; then 
	LOCALE=`echo $LANG | cut -d . -f1`
fi

# Main text processing. First: turn multiline translations into one line translations
# Then drop original strings and contexts
# Then strip away msgid "", invisible parts and things that are supposed to stay untranslated 
# or ones that would show up as false positives
msgattrib --no-wrap --no-fuzzy --no-obsolete "$1" | \
awk '
	BEGIN {
		do_print = 0;
		count = 1;
	}
	/^msgid/ {
		do_print = '${MSGID}';
	}
	/^msgctxt/ {
		do_print = 0;
	}
	/^msgstr/ {
		do_print = '${MSGSTR}' ;
		count = count + 1;
	}
	//	{
		if (do_print && count > 2) print $0;
	}
' | sed -r \
-e 's/^#.*//g # Drop comment lines starting with # ' \
-e 's/^msgstr\[*.*\]* "// # Drop gettext label of translated text' \
-e 's/^msgid\[*.*\]* "// # Drop gettext label of untranslated text' \
-e 's/^"// # Drop starting quotes surrounding the strings' \
-e 's/"$// # Drop closing quotes surrounding the strings ' \
-e 's/\\./ /g # Replace control sequences like \n \t with a space' \
-e 's/@@.*//g # Image md5 sums in GNOME docs' \
-e 's/external ref=.*//g # Image md5 sums in GNOME docs' \
-e 's/--[[:alpha:]]*(-[[:alpha:]]*)*=?//g # Command line --options are supposed to remain English' \
-e 's|(<[^>]+>)+| |g # <XML> tags' \
-e 's|&[A-Za-z_:][A-Za-z0-9_\.:-]*;| |g # HTML &entities;' \
-e 's|Â­||g # soft hyphens' \
-e 's/\;/ /g # Hunspell does not consider this as punctuation' \
-e "s/ '/ /g # Single quotes aren't considered punctuation either" \
-e "s/' / /g # Single quotes aren't considered punctuation either, but not all is to be dropped" \
-e "s/(%\([^)]+\).)+/ /g # Python 3-style %(named)s variables" \
-e "s/(\{[^}]+)}+/ /g # {named} variables" \
-e 's/[_&~]//g # ~Common _accelerator &keys' |
hunspell -d "$LOCALE" -l | sort -u | column
